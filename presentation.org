#+STARTUP: beamer

#+TITLE: Some decidability questions in abstract program semantics
# #+SUBTITLE: Computing abstract semantics
#+AUTHOR: Luca Zaninotto
#+EMAIL: luca.zaninotto.1@studenti.unipd.it
#+DATE: 03 Jul 2024

#+options: toc:nil H:2
#+options: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+bibliography: references.bib
#+cite_export: biblatex

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: CambridgeUS
#+KEYWORDS: Abstract interpretation, Program semantics
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)

# =========== LATEX EXPORT HEADERS ===========

#+latex_header: \institute[UniPD]{Master degree in Computer Science \mbox{}\\ \mbox{}\\ UniversitÃ  degli studi di Padova}
#+latex_header: \usepackage{preamble}
#+latex_header: \usepackage{commands}

* Introduction
** The cost of software failures
*** Ariane image
    :properties:
    :beamer_col: 0.45
    :end:
    #+attr_latex: :width \textwidth
    #+caption: Ariane 5 crash, circa 370mln$ in damages
    [[./images/ariane5.jpg]]
*** Catching bugs ahead of time
    :properties:
    :beamer_col: 0.45
    :end:
    - Testing and careful design might not be enough.
    - Formal methods can help, by providing strong mathematical
      guarantees. \pause
    - We focus in particular on *Abstract interpretation*.
** Abstract interpretation
   Given a program semantics, abstracts its behaviour and provide a
   /sound/ property of the program, also called /invariant/
   #+begin_export latex
   \begin{figure}
     \centering
     \begin{tikzpicture}
       \node (concrete) at (-1.2,1) {\(\mathcal{C}\)};
       \draw (0,0) ellipse [x radius=1cm, y radius=2cm];

       \pause
       \node (abstract) at (6.2,1) {\(\mathcal{A}\)};
       \draw (5,0) ellipse [x radius=1cm, y radius=2cm];

       \pause
       \node [red] (concel) at (0,1) {\textbullet};
       \node [blue] (abstel) at (5,1) {\textbullet};
       \draw (concel) edge[->,bend left=10] node[above]{\(\abstr\)} (abstel);

       \pause
       \node [codegreen] (abstres) at (5,-1) {\textbullet};
       \node (txt) at (7,0) {\rmfamily\tiny Abstract};
       \node (txt1) at (7,-.3) {\rmfamily\tiny computation};
       \draw [codegreen, ->] (abstel) edge[dashed, bend left=10] (abstres);

       \pause
       \draw [codegreen, thick] (0,-1) ellipse [x radius=.3cm, y radius=.5cm];
       \fill [codegreen, very nearly transparent] (0,-1) ellipse [x radius=.3cm, y radius=.5cm];
       \draw [codegreen] (abstres) edge[bend left=5] (0,-0.5);
       \draw [codegreen] (abstres) edge[bend left=10] (0,-1.5);
       \node (gamma) at (2,-1.25) {\(\concr\)};

       \pause
       \node (concres) at (0,-1.3) {\textbullet};
       \draw [->] (concel) edge[dashed, bend right=10] (concres);
       \node (txt2) at (-2,0) {\rmfamily\tiny Concrete};
       \node (txt3) at (-2,-.3) {\rmfamily\tiny computation};

       \node [blue] (txt4) at (-2, -1.3) {\scriptsize Soundness};

       \pause
       \node (txt5) at (7,-2) {\tiny Does it terminate?};
       \draw [->] (txt5) edge[bend right=10] (txt1);
       \onslide<1->
     \end{tikzpicture}
   \end{figure}
   #+end_export
** Analyzer termination is not guaranteed
   Consider the simil-C program
   #+begin_src C
     int x = 0;
     while(true) {
       x++;
     }
   #+end_src
   A concrete semantics that collects variables values diverges
   #+begin_export latex
   \begin{center}
     \([\var\mapsto 0]\) \pause
     \(\to \{[\var\mapsto 0], [\var\mapsto 1]\}\) \pause
     \(\to^* \{[\var\mapsto n] \mid 0 \leq n \leq k, k\in\n\}\) \pause
      \(\to\dots\)
    \end{center}
    #+end_export
   Interval analaysis would also diverge
   #+begin_export latex
   \begin{center}
     \([\var\mapsto [0,0]]\) \pause
     \(\to [\var\mapsto [0,1]]\) \pause
     \(\to^* [\var\mapsto [0,k]]\) with \(k\in\n\) \pause
      \(\to\dots\)
    \end{center}
    #+end_export
** Goal
   - Enstablish if some abstract semantics are computable.
   - Focus on non-relational domains:
     + Interval domain: \(\inte \defin (\Var \mapsto \Int)\)
     + Non-relational collecting domain: \(\bCnr \defin (\Var \mapsto \poset{\z})\)
* Outline
** Outline
   1. \(\imp\) language and its semantics
   2. Non relational abstract domains
   3. Computing the abstract semantics
   4. Results and future work
* Imp
** Grammar
   - Minimal core of an imperative language;
   - Turing complete;
   - Based on Kleene algebras with tests.


   #+begin_export latex
   \begin{align*}
     \expr \ni \com[e] ::= & \; \var \in I \mid \var := k \mid \var := \var[y] + k \\
     \imp \ni \com[C] ::= & \; \com[e] \mid \com + \com \mid \com ; \com \mid \com^* \mid \fix{\com}
   \end{align*}
   #+end_export

   -  while \(b\) do \(\com\) \(\implies \fix{b \seq \com} \seq
     \neg b\)
   - if \(b\) then \(\com_1\) else \(\com_2\) \(\implies (b \seq
     \com_1) \ndet (\neg b \seq\com_2)\)
   
** Concrete semantics
   #+begin_export latex
   \begin{align*}
     \sem{\com[e]} X & \defin \{\bsem{\com[e]} \rho \mid \rho \in X,
     \bsem{\com[e]} \rho \neq \bot\} \\
     \sem{\com[C_1] + \com[C_2]} X & \defin \sem{\com[C_1]} X \cup \sem{\com[C_2]} X \\
     \sem{\com[C_1] ; \com[C_2]} X & \defin \sem{\com[C_2]}(\sem{\com[C_1]} X) \\
     \sem{\com[C^*]} X & \defin \bigcup_{i \in \n} \sem{\com[C]}^i X \\
     \sem{\fix{C}} X & \defin \lfp(\lambda Y \in\poset{\env} . (X \cup \sem{\com}Y))
   \end{align*}
   #+end_export
   - Collecting semantics.
   - Finitentess and termination are undecidable because of Rice.
* Non-relational domains
** Interval domain
   #+begin_export latex
   \begin{equation*}
     \Int \defin \{[a,b] \mid a \in \z \cup \{-\infty\}, b\in\z\cup\{+\infty\} \land a \leq b\}
   \end{equation*}
   #+end_export
   - Variables map to an interval \([\var \mapsto [-1,1], \var[y]
     \mapsto [0,0], \dots]\)
   - *Non-relational*, relations beween variables (e.g., \(\var =
     3*\var[y]\)) are not modelled
   - Computation of fixpoints non trivial
** Infinite chains
   #+begin_src imp
     x := 0; fix(true; x++)
   #+end_src
   - Computation does not halt
     #+begin_export latex
     \begin{equation*}
       [\var\mapsto 0] \to \{[\var\mapsto 0], [\var\mapsto 1]\} \to \dots \to \{[\var\mapsto n] \mid n\in\n\}
     \end{equation*}
     #+end_export
   - Analysis does not halt either
     #+begin_export latex
     \begin{equation*}
       [\var\mapsto[0,0]] \to [\var\mapsto[0,1]] \to \dots \to [\var\mapsto[0,\infty]]
     \end{equation*}
     #+end_export
   - Problem: iterating over an infinite chain in the domain
     #+begin_export latex
     \begin{equation*}
       [0,0] \sqsubseteq [0,1] \sqsubseteq \dots \sqsubseteq [0,\infty]
     \end{equation*}
     #+end_export
** Widening and narrowing
   - Common approach: widening \(\widen\)
   - Widening over-approximates a result. Example
     #+begin_src imp
       x := 0; fix(x < 10; x++);
     #+end_src
     + *Precise analysis* (not guaranteed to halt): \([\var\mapsto[0,10]]\)
     + *Analsys with widening* (halts): \([\var\mapsto[0,\infty]]\))
** The problem
   #+begin_problem 
   Can we compute the precise interval semantics while ensuring the
   termination of the analyzer?
   #+end_problem
** Bounding the interval domain
   Consider the behaviour of some variable \(\var\) while computing
   #+begin_export latex
   \begin{equation*}
     \semi{\fix\com}\eta = \lfp(\lambda\mu . (\eta\sqcup\semi{\com}\mu))
   \end{equation*}
   \begin{figure}
     \centering
     \begin{tikzpicture}
       %% Axes
       \draw[help lines, <->] (-5,0) -- (5,0);
       \draw[help lines] (0,-.5) -- (0,.5);
       \draw[help lines] (-4,.1) grid (4,-.1);
       \node (x) at (-5,1) {\footnotesize\(\var\)};

       %% x initial state
       \onslide<1>{\node [blue] (a) at (-.81,0) {$[a_1$};}
       \onslide<1>{\node [blue] (b) at (.3,0) {$b_1]$};}

       %% after some rounds
       \pause
       \node [blue] (a2) at (-1.81,0) {$[a_2$};
       \onslide<2>{\draw (a.north) edge[->, bend right=10] (-2,.3);}
       \onslide<2>{\node [blue] (b) at (.3,0) {$b_1]$};}

       \pause
       \onslide<3>{\draw (b.north) edge[->, bend left=10] (1,.3);}
       \onslide<3>{\node [blue] (b2) at (.81,0) {$b_2]$};}

       \pause
       \node [red,label={[font=\scriptsize,color=red]above:\(\low\)}]
       (low) at (-3,0) {[};
       \node [red,label={[font={\rmfamily\scriptsize},color=red]above:\(\upp\)}]
       (low) at (3,0) {]};
       \onslide<4>{\node [blue] (b3) at (.81,0) {$b_2]$};}

       \pause
       \onslide<5>{\draw (b2.south) edge[->,dashed,blue,bend right=10] (4,-.3);}
       \onslide<5>{\node [blue] (b4) at (3.81,0) {$b_3]$};}

       \pause
       \node [blue, thick] (b5) at (6,0) {$\infty]$};
       \draw [blue] (b4.south) edge[->] (b5.south);
       \onslide<1->
     \end{tikzpicture}
   \end{figure}
   #+end_export
   \pause
   - Bounds are determined by the program \(\com\) and the initial
     environment
   - If a variable exceeds a bound the corresponding side of the
     interval is pushed to infinity
** Bounding the interval domain
   By chosing \(\low,\upp\) appropriately
   #+begin_export latex
   \begin{align*}
     \binte{\low}{\upp} \defin & \; \{[a,b] \mid a,b\in\z \land \low \leq a \leq b \leq \upp\} \\
     & \; \cup \{[a,+\infty] \mid a \geq \low\} \\
     & \; \cup \{[-\infty,b] \mid b \leq \upp\}
   \end{align*}
   #+end_export
   it holds that
   #+begin_export latex
   \begin{equation*}
     \semi{\com}\eta = \bsemi{\low}{\upp}{\com}\eta
   \end{equation*}
   #+end_export

   Since \(\binte{\low}{\upp}\) does not contain infinite chains, the
   termination trivializes.
** Non-relational collecting domain
   #+begin_export latex
   \begin{equation*}
     \bCnr \defin (\Var \to \poset{\z}) \cup \{\bot\}
   \end{equation*}
   #+end_export
   - Variables map to a generic subset of integers;
   - Variable images are no longer convex;
   - We could only prove some partial results.
** Bounding the non-relational collecting domain
   #+begin_export latex
   \begin{equation*}
	 \bposet{\low}{\upp}{\z} \defin \{S \subseteq \z \mid S \neq \emptyset \land \forall x \in S \quad \low \leq x \leq \upp\}
   \end{equation*}
   \begin{equation*}
     \btbCnr{\low}{\upp} \defin (\Var \to \bposet{\low}{\upp}{\z}) \cup \{\bot, \top\}
   \end{equation*}
   #+end_export
   - Variables mapped to bounded subsets of \(\z\).
   - If some variable exceeds the bound than the whole analysis
     results in the smashed \(\top\) element.
   - This way we can only infer analysis termination and not the most
     precise abstract invariant.
* Conclusions
** Results
   - Interval analysis can be computed precisely in finite time
     #+begin_export latex
     \begin{equation*}
       \semi[\inte]{\com}\eta = \semi[\binte{\low}{\upp}]{\com}\eta
     \end{equation*}
     #+end_export 
   - For non-relational collecting semantics we can decide termination
     of the analyzer.
** Future work
   - Expand the language to include non-linear variable assignment
     \(\var := \var[y]*k\)
   - Expand on precise non-relational collecting semantics 
